Index: src/main/java/at/ac/fhcampuswien/xsolutions/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.ac.fhcampuswien.xsolutions;\r\n\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.type.TypeFactory;\r\nimport java.io.IOException;\r\nimport java.nio.file.Paths;\r\nimport java.util.*;\r\n\r\nimport static at.ac.fhcampuswien.xsolutions.Configurator.getProductsListPath;\r\n\r\npublic class Product {\r\n    public String productTitle;\r\n    public double productPrice;\r\n    public String productDescription;\r\n    public String productImageUrl;\r\n    public ArrayList<String> category = new ArrayList<>();\r\n    public static List<String> categories = Arrays.asList(\"Italienische K\\u00FCche\",\"Internationale K\\u00FCche\",\"Vegetarisch\",\"Desserts\",\"Salate\",\"Fischgerichte\",\"Suppen\",\"Alkoholfreie Getr\\u00E4nke\",\"Alkoholische Getr\\u00E4nke\");\r\n    public static List<Product> productsList = new ArrayList<>();    // ProductList\r\n    private static int count;\r\n\r\n    public Product() {\r\n        super();\r\n    }\r\n\r\n    /** Constructor of Product object\r\n     * @param productTitle - Name of the product\r\n     * @param productPrice - Price of the product\r\n     * @param productDescription - Description of the product\r\n     * @param productImageUrl - Image URL\r\n     * @param category - Product Category\r\n     */\r\n    public Product(String productTitle, double productPrice, String productDescription, String category, String productImageUrl) throws IOException {\r\n        count++;\r\n        this.productImageUrl = productImageUrl;\r\n        this.productTitle = productTitle;\r\n        this.productPrice = productPrice;\r\n        this.productDescription = productDescription;\r\n        if ((Objects.equals(this.category, \"\") || Objects.equals(this.category, \"Nicht zugeordnet\") || Objects.equals(this.category, \"null\"))){\r\n            this.category.add(\"Nicht zugeordnet\");\r\n        } else {\r\n            this.category.addAll(Arrays.asList(category.split(\",\")));\r\n        }\r\n        initializeProducts();\r\n    }\r\n    public Product(String productTitle, double productPrice, String productDescription, String productImageUrl) throws IOException {\r\n        count++;\r\n        this.productImageUrl = productImageUrl;\r\n        this.productTitle = productTitle;\r\n        this.productPrice = productPrice;\r\n        this.productDescription = productDescription;\r\n        this.category.add(\"Nicht zugeordnet\");\r\n        initializeProducts();\r\n    }\r\n    public Product(String productTitle, double productPrice, String productDescription) throws IOException {\r\n        this.productTitle = productTitle;\r\n        this.productPrice = productPrice;\r\n        this.productDescription = productDescription;\r\n        this.category.add(\"Nicht zugeordnet\");\r\n        initializeProducts();\r\n    }\r\n    public Product(String productTitle, double productPrice) throws IOException {\r\n        this.productTitle = productTitle;\r\n        this.productPrice = productPrice;\r\n        this.category.add(\"Nicht zugeordnet\");\r\n        initializeProducts();\r\n    }\r\n\r\n    /** Adds product to productsList array and updates the JSON File\r\n     */\r\n    private void initializeProducts() {\r\n        productsList.add(this);\r\n        productToJSON();\r\n    }\r\n\r\n    public void setCategory(String category) {\r\n        if (!(Objects.equals(this.category, \"\") || Objects.equals(this.category, \"Nicht zugeordnet\") || Objects.equals(this.category, \"null\"))) {\r\n            this.category.add(category);\r\n        } else {\r\n            this.category.clear();\r\n            this.category.add(category);\r\n        }\r\n    }\r\n\r\n    public static void addCategory(String category){\r\n        categories.add(category);\r\n    }\r\n\r\n    public void removeCategory(String category) {\r\n        this.category.remove(category);\r\n    }\r\n    public void clearCategory(){\r\n        this.category.clear();\r\n    }\r\n    public static void sortProducts(){\r\n        //Sort Products List by their Category\r\n        productsList.sort(Comparator.comparingInt(p -> getCategoryOrder(p.getCategory())));\r\n    }\r\n\r\n    public String getCategory() {\r\n        return Arrays.toString(category.toArray()).replace(\"[\", \"\").replace(\"]\", \"\");\r\n    }\r\n\r\n    public static List<String> getCategories() {\r\n        return categories;\r\n    }\r\n\r\n\r\n\r\n    public static int getCategoryOrder(String category) {\r\n        return categories.indexOf(category);\r\n    }\r\n\r\n    public String getProductTitle() {\r\n        return productTitle;\r\n    }\r\n    public double getProductPrice() {\r\n        return productPrice;\r\n    }\r\n    public String getProductDescription() {\r\n        return productDescription;\r\n    }\r\n\r\n    public String getProductImageUrl() {\r\n        return productImageUrl;\r\n    }\r\n\r\n    public void setProductTitle(String productTitle) {\r\n        this.productTitle = productTitle;\r\n    }\r\n\r\n    public void setProductPrice(double productPrice) {\r\n        this.productPrice = productPrice;\r\n    }\r\n\r\n    public void setProductDescription(String productDescription) {\r\n        this.productDescription = productDescription;\r\n    }\r\n\r\n    public void setProductImageUrl(String productImageUrl) {\r\n        this.productImageUrl = productImageUrl;\r\n    }\r\n\r\n    /**\r\n     * productsList (List of all parsed products) is being put in a single JSON File.\r\n     */\r\n    public static void productToJSON() {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        try{\r\n            java.nio.file.Path path = Paths.get(getProductsListPath().toURI());\r\n            objectMapper.writeValue(path.toFile(), productsList);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * productsList is being recreated from a JSON File.\r\n     */\r\n    public static void JSONtoProductList() throws IOException {\r\n        if (productsList != null){\r\n            ObjectMapper objectMapper = new ObjectMapper();\r\n            TypeFactory typeFactory = objectMapper.getTypeFactory();\r\n            productsList = objectMapper.readValue(getProductsListPath(), typeFactory.constructCollectionType(List.class, Product.class));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Search bar: shows a new array of sorted products by the search term\r\n     */\r\n    public static List<Product> filterProductsByName(String searchTerm) {\r\n        List<Product> filteredProducts = new ArrayList<>();\r\n        for (Product product : productsList) {\r\n            if (product.getProductTitle().toLowerCase().contains(searchTerm.toLowerCase())) {\r\n                filteredProducts.add(product);\r\n            }\r\n        }\r\n        return filteredProducts;\r\n    }\r\n\r\n    public static List<Product> filterProductsByCategory(String searchTerm) {\r\n        List<Product> filteredProducts = new ArrayList<>();\r\n        for (Product product : productsList) {\r\n            if (product.getCategory().contains(searchTerm)) {\r\n                filteredProducts.add(product);\r\n            }\r\n        }\r\n        return filteredProducts;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/ac/fhcampuswien/xsolutions/Product.java b/src/main/java/at/ac/fhcampuswien/xsolutions/Product.java
--- a/src/main/java/at/ac/fhcampuswien/xsolutions/Product.java	(revision d82a7b7d67236cb2ba29b03c4361e773b61c3f1f)
+++ b/src/main/java/at/ac/fhcampuswien/xsolutions/Product.java	(date 1674242410615)
@@ -14,7 +14,7 @@
     public String productDescription;
     public String productImageUrl;
     public ArrayList<String> category = new ArrayList<>();
-    public static List<String> categories = Arrays.asList("Italienische K\u00FCche","Internationale K\u00FCche","Vegetarisch","Desserts","Salate","Fischgerichte","Suppen","Alkoholfreie Getr\u00E4nke","Alkoholische Getr\u00E4nke");
+    private static List<String> categories = Arrays.asList("Italienische K\u00FCche","Internationale K\u00FCche","Vegetarisch","Desserts","Salate","Fischgerichte","Suppen","Alkoholfreie Getr\u00E4nke","Alkoholische Getr\u00E4nke");
     public static List<Product> productsList = new ArrayList<>();    // ProductList
     private static int count;
 
Index: src/main/java/at/ac/fhcampuswien/xsolutions/AppController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.ac.fhcampuswien.xsolutions;\r\n\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\nimport javafx.util.StringConverter;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.text.DecimalFormat;\r\nimport java.util.*;\r\n\r\nimport static at.ac.fhcampuswien.xsolutions.App.arrayTables;\r\nimport static at.ac.fhcampuswien.xsolutions.App.getDate;\r\nimport static at.ac.fhcampuswien.xsolutions.Configurator.setValue;\r\nimport static at.ac.fhcampuswien.xsolutions.LoginController.getLoggedInUserName;\r\nimport static at.ac.fhcampuswien.xsolutions.LoginController.isAdmin;\r\nimport static at.ac.fhcampuswien.xsolutions.Product.*;\r\nimport static at.ac.fhcampuswien.xsolutions.Receipt.*;\r\nimport static at.ac.fhcampuswien.xsolutions.ReceiptHistory.getFromReceiptHistory;\r\nimport static at.ac.fhcampuswien.xsolutions.Tables.setTablesCount;\r\nimport static at.ac.fhcampuswien.xsolutions.User.userToJson;\r\nimport static at.ac.fhcampuswien.xsolutions.User.usersList;\r\n\r\n\r\npublic class AppController implements Initializable {\r\n    List<Currency> currencies = Arrays.asList(Currency.getInstance(Locale.US),\r\n            Currency.getInstance(Locale.GERMANY),\r\n            Currency.getInstance(Locale.UK),\r\n            Currency.getInstance(Locale.JAPAN));\r\n\r\n    @FXML\r\n    private Button resetBill;\r\n    @FXML\r\n    private Label totalPrice;\r\n\r\n    @FXML\r\n    private ListView<String> usersListView;\r\n\r\n    @FXML\r\n    private ListView<String> productsListViewSettings;\r\n\r\n    @FXML\r\n    private ListView<String> tablesListView;                // Left Panel\r\n\r\n    @FXML\r\n    private ImageView adminButton;\r\n\r\n    @FXML\r\n    private Label billText;\r\n\r\n    @FXML\r\n    private TextField searchField;\r\n\r\n    @FXML\r\n    private Label kellnerLabel;\r\n\r\n    @FXML\r\n    private GridPane GridPaneProducts;\r\n\r\n    @FXML\r\n    private ScrollPane ScrollPaneProducts;\r\n\r\n    @FXML\r\n    private Pane settingsTab;\r\n\r\n    @FXML\r\n    private Pane findReceiptPane;\r\n\r\n    @FXML\r\n    private FlowPane receiptPreview;\r\n\r\n    @FXML\r\n    private Button userSettings;\r\n\r\n    @FXML\r\n    private Button productsSettings;\r\n\r\n    @FXML\r\n    private Button tablesSettings;\r\n\r\n    @FXML\r\n    private TextField settingsInputField;\r\n\r\n    @FXML\r\n    private Label settingsLabelParameter;\r\n\r\n    @FXML\r\n    private VBox productsPane;\r\n\r\n    @FXML\r\n    private ScrollPane billScroll;\r\n\r\n    @FXML\r\n    private VBox tablesSettingPane;\r\n\r\n    @FXML\r\n    private Pane usersSettingsPane;\r\n\r\n    @FXML\r\n    private Label userSettingsAdminRights;\r\n\r\n    @FXML\r\n    private Label userSettingsFullName;\r\n\r\n    @FXML\r\n    private Label userSettingsUsername;\r\n\r\n    @FXML\r\n    private TextField newFullNameField;\r\n\r\n    @FXML\r\n    private TextField newUsernameField;\r\n\r\n    @FXML\r\n    private TextField newPasswordField;\r\n\r\n    @FXML\r\n    private Label productsSettingsDescription;\r\n\r\n    @FXML\r\n    private Label productsSettingsName;\r\n\r\n    @FXML\r\n    private Pane productsSettingsPane;\r\n\r\n    @FXML\r\n    private Label productsSettingsURL;\r\n\r\n    @FXML\r\n    private Label productsSettingsPrice;\r\n\r\n    @FXML\r\n    private Label productsSettingsCategory;\r\n\r\n    @FXML\r\n    private TextField newProductDescription;\r\n\r\n    @FXML\r\n    private TextField newProductName;\r\n\r\n    @FXML\r\n    private TextField newProductPrice;\r\n\r\n    @FXML\r\n    private TextField newTelField;\r\n    @FXML\r\n    private TextField newAdressField;\r\n    @FXML\r\n    private TextField newMessageField;\r\n\r\n    @FXML\r\n    private Text previewAdress;\r\n\r\n    @FXML\r\n    private Text previewTel;\r\n\r\n    @FXML\r\n    private Text previewMessage;\r\n\r\n    @FXML\r\n    private TextField newURL;\r\n\r\n    @FXML\r\n    private Text datum;\r\n\r\n    @FXML\r\n    private Pane systemSettingsPane;\r\n\r\n    @FXML\r\n    private Pane billSettingsPane;\r\n\r\n    @FXML\r\n    private TextField systemNewCurrencyField;\r\n\r\n    @FXML\r\n    private TextField systemNewTaxesField;\r\n\r\n    @FXML\r\n    private TextField systemNewBillNrField;\r\n\r\n    @FXML\r\n    private Button systemSettings;\r\n\r\n    @FXML\r\n    private FlowPane paymentMethodsPane;\r\n\r\n    @FXML\r\n    private Pane paymentSuccessfulPane;\r\n\r\n    @FXML\r\n    private Pane paymentSelectionPane;\r\n\r\n    @FXML\r\n    private ChoiceBox<Currency> systemNewCurrencySelector;\r\n\r\n    @FXML\r\n    private ChoiceBox<String> newProductCategory;\r\n\r\n    @FXML\r\n    private Label paymentTotalBeforeAllLabel;\r\n\r\n    @FXML\r\n    private Label paymentTipLabel;\r\n\r\n    @FXML\r\n    private Label paymentTotalLabel;\r\n\r\n    @FXML\r\n    private Label restMoneyLabel;\r\n\r\n    @FXML\r\n    private TextField paymentAmountPayedField;\r\n\r\n    @FXML\r\n    private Button printBillButton;\r\n\r\n    @FXML\r\n    private Pane payCashPane;\r\n\r\n    @FXML\r\n    private Label restMoneyLabelSuccess;\r\n\r\n    @FXML\r\n    private Label errorLabel;\r\n\r\n    @FXML\r\n    private TextField tipField;\r\n    @FXML\r\n    private Pane productImagePreview;\r\n\r\n    @FXML\r\n    private AnchorPane receiptPane;\r\n    @FXML\r\n    private Label dateInReceipt;\r\n    @FXML\r\n    private Label timeInReceipt;\r\n    @FXML\r\n    private Text receiptBill;\r\n    @FXML\r\n    private Text receiptAddress;\r\n    @FXML\r\n    private Text receiptBillNumber;\r\n    @FXML\r\n    private Label receiptPayAmount;\r\n    @FXML\r\n    private Text receiptMessage;\r\n    @FXML\r\n    private Label receiptPayAmountText;\r\n    @FXML\r\n    private Label receiptRestMoney;\r\n    @FXML\r\n    private Label receiptRestMoneyText;\r\n    @FXML\r\n    private Text receiptTelefonNumber;\r\n    @FXML\r\n    private Label receiptTotal;\r\n\r\n    @FXML\r\n    private TextField receiptNumberField;\r\n    @FXML\r\n    private Text receiptAddressFound;\r\n    @FXML\r\n    private Label receiptPrevierwTitle;\r\n    @FXML\r\n    private Text receiptTelefonNumberFound;\r\n    @FXML\r\n    private Text receiptBillNumberFound;\r\n    @FXML\r\n    private Label dateInReceiptFound;\r\n    @FXML\r\n    private Label timeInReceiptFound;\r\n    @FXML\r\n    private Text receiptBillFound;\r\n    @FXML\r\n    private Label receiptTotalFound;\r\n    @FXML\r\n    private Label receiptPayAmountFound;\r\n    @FXML\r\n    private Label receiptRestMoneyFound;\r\n    @FXML\r\n    private Text receiptMessageFound;\r\n    @FXML\r\n    private Label receiptTotalText;\r\n    @FXML\r\n    private VBox emptyReceiptPane;\r\n    @FXML\r\n    private Text tableNumberText;\r\n    @FXML\r\n    private Label subTotalLabel;\r\n    @FXML\r\n    private Label taxesTitleLabel;\r\n    @FXML\r\n    private Label totalTaxesBill;\r\n\r\n    @FXML\r\n    private ChoiceBox<String> choiceBox;\r\n\r\n    @FXML\r\n    private Button resetCategory;\r\n    @FXML\r\n    private Button resetCategoryTrash;\r\n\r\n    @FXML\r\n    private Button resetPreview;\r\n\r\n    @FXML\r\n    private Button categorySettings;\r\n\r\n    @FXML\r\n    private Pane categorySettingPane;\r\n\r\n    @FXML\r\n    private ListView<String> categoryListView;\r\n\r\n    @FXML\r\n    private Label categoryLabelSettings;\r\n\r\n    @FXML\r\n    private TextField categorySettingsField;\r\n\r\n    @FXML\r\n    private ChoiceBox<String> newCategoryBox;\r\n\r\n    @FXML\r\n    private TextField categoryNameField;\r\n\r\n    private Tables getCurrentTable() {\r\n        int currentTableIndex;\r\n        if (tablesListView.getSelectionModel().getSelectedIndex() != -1){\r\n            currentTableIndex = tablesListView.getSelectionModel().getSelectedIndex();\r\n        } else {\r\n            currentTableIndex = 0;\r\n        }\r\n\r\n        return arrayTables[currentTableIndex];\r\n    }\r\n\r\n    private Receipt getCurrentReceipt() {\r\n        int currentReceiptIndex;\r\n        if (tablesListView.getSelectionModel().getSelectedIndex() != -1){\r\n            currentReceiptIndex = tablesListView.getSelectionModel().getSelectedIndex();\r\n        } else {\r\n            currentReceiptIndex = 0;\r\n        }\r\n        return arrayReceipts.get(currentReceiptIndex);\r\n    }\r\n\r\n    // Set date in the Bill\r\n    @FXML\r\n    void dateSetter(){\r\n        datum.setText(getDate());\r\n    }\r\n\r\n\r\n    // Add Product into Bill of selected Table\r\n    @FXML\r\n    void addToBillButton(Product item){\r\n        Receipt currentReceipt = getCurrentReceipt();\r\n        Tables currentTable = getCurrentTable();\r\n\r\n        // If the product is already in the map, increase its quantity by 1\r\n        if (currentReceipt.getProductCounter().containsKey(item)) {\r\n            int currentQuantity = currentReceipt.getProductCounter().get(item);\r\n            currentReceipt.getProductCounter().put(item, currentQuantity + 1);\r\n        }\r\n        // Otherwise, add the product to the map with a quantity of 1\r\n        else {\r\n            currentReceipt.getProductCounter().put(item, 1);\r\n        }\r\n\r\n        // Add product to usedProducts list\r\n        currentReceipt.addUsedProducts(item);\r\n        // Update Total Price and Bill\r\n        currentReceipt.addToSubtotal(item.getProductPrice());\r\n        currentTable.setServerName(getLoggedInUserName());\r\n        updateBill();\r\n    }\r\n\r\n    @FXML\r\n    void removeFromBillButton(Product item) {\r\n        Receipt currentReceipt = getCurrentReceipt();\r\n\r\n        // Check if the product is in the map\r\n        if (currentReceipt.getProductCounter().containsKey(item) && currentReceipt.getUsedProducts().contains(item)) {\r\n            // If the product is in the map, decrease its quantity by 1\r\n            int currentQuantity = currentReceipt.getProductCounter().get(item);\r\n            if (currentQuantity != 0) {\r\n                currentQuantity--;\r\n            }\r\n\r\n            // Update the map with the updated quantity of the product\r\n            currentReceipt.getProductCounter().put(item, currentQuantity);\r\n\r\n            // If the product's quantity is 0, remove the product from the usedProducts list and update the bill\r\n            if (currentQuantity == 0) {\r\n                currentReceipt.removeUsedProducts(item);\r\n            }\r\n            currentReceipt.subtractFromSubtotal(item.getProductPrice());\r\n            updateBill();\r\n        }\r\n        if (currentReceipt.getUsedProducts().size() == 0) {\r\n            resetBill();\r\n        }\r\n        billText.setText(currentReceipt.getFullReceipt());\r\n    }\r\n\r\n    @FXML\r\n    void printReceipt() throws IOException {\r\n        Receipt currentReceipt = getCurrentReceipt();\r\n\r\n        paymentSelectionPane.setVisible(false);\r\n        paymentSuccessfulPane.setVisible(false);\r\n        receiptPane.setVisible(true);\r\n\r\n        currentReceipt.increaseBillNumber();\r\n        timeInReceipt.setText(getStaticTime());\r\n\r\n        dateInReceipt.setText(getDate());\r\n        receiptBill.setText(currentReceipt.getShortReceipt());\r\n        receiptAddress.setText(\"Adresse: \" + getAddress());\r\n        receiptTelefonNumber.setText(\"Telefon: \" + getTel());\r\n        receiptBillNumber.setText(\"Belegnummer: \" + currentReceipt.getInitialReceiptNumber());\r\n        receiptMessage.setText(getMessage());\r\n        receiptTotal.setText(currentReceipt.getTotalWithTip() + getCurrency());\r\n        receiptRestMoney.setText(df.format(currentReceipt.getChangeAmount()) + getCurrency());\r\n\r\n        SimpleReceipt refactoredReceipt = new SimpleReceipt(String.valueOf(currentReceipt.getCount()), currentReceipt.getDate(), currentReceipt.getTime(), currentReceipt.getShortReceipt(), currentReceipt.getTotalWithTip(), String.valueOf(currentReceipt.getAmountPayed()), df.format(currentReceipt.getChangeAmount()));\r\n\r\n        resetBill();\r\n    }\r\n    @FXML\r\n    void closeReceipt(){\r\n        paymentMethodsPane.setVisible(false);\r\n        receiptPane.setVisible(false);\r\n        resetBill();\r\n    }\r\n\r\n    @FXML\r\n    void showPaymentPane() {\r\n        Receipt currentReceipt = getCurrentReceipt();\r\n\r\n        if (Double.parseDouble(currentReceipt.getTotal()) > 0){\r\n            paymentMethodsPane.setVisible(true);\r\n            paymentSelectionPane.setVisible(true);\r\n            paymentSuccessfulPane.setVisible(false);\r\n        }\r\n\r\n    }\r\n\r\n    @FXML\r\n    void closePaymentPane() {\r\n        if (paymentSuccessfulPane.isVisible()) {\r\n            Receipt currentReceipt = getCurrentReceipt();\r\n            SimpleReceipt refactoredReceipt = new SimpleReceipt(String.valueOf(currentReceipt.getCount()), currentReceipt.getDate(), currentReceipt.getTime(), currentReceipt.getShortReceipt(), currentReceipt.getTotalWithTip(), String.valueOf(currentReceipt.getAmountPayed()), df.format(currentReceipt.getChangeAmount()));\r\n            resetBill();\r\n        }\r\n\r\n        paymentMethodsPane.setVisible(false);\r\n        paymentSuccessfulPane.setVisible(false);\r\n        payCashPane.setVisible(false);\r\n        restMoneyLabelSuccess.setText(\" \");\r\n    }\r\n\r\n    @FXML\r\n    void setTipButton(ActionEvent event) {\r\n        Receipt currentReceipt = getCurrentReceipt();\r\n\r\n        currentReceipt.setTip(Double.parseDouble(tipField.getText()));\r\n    }\r\n\r\n    @FXML\r\n    void payCard(ActionEvent event) {\r\n        Receipt currentReceipt = getCurrentReceipt();\r\n        String payed = df.format((Double.parseDouble(currentReceipt.getTotal()) + currentReceipt.getTip()));\r\n\r\n        receiptPayAmount.setText(payed + getCurrency());\r\n        restMoneyLabelSuccess.setVisible(false);\r\n        currentReceipt.setChangeMoney((double) 0);\r\n        paymentSuccessfulPane.setVisible(true);\r\n    }\r\n\r\n    @FXML\r\n    void payCash(ActionEvent event) {\r\n        Receipt currentReceipt = getCurrentReceipt();\r\n\r\n        paymentTotalBeforeAllLabel.setText(\"Gesamtsumme inkl. MWSt: \" + currentReceipt.getTotal() + getCurrency());\r\n        paymentTipLabel.setText(\"Trinkgeld: \" + currentReceipt.getTip() + getCurrency());\r\n        paymentTotalLabel.setText(\"Gesamtsumme inkl. Trinkgeld u. MWSt: \" + currentReceipt.getTotalWithTip() + getCurrency());\r\n\r\n        restMoneyLabelSuccess.setVisible(true);\r\n        payCashPane.setVisible(true);\r\n    }\r\n\r\n    @FXML\r\n    void confirmPaymentCash(ActionEvent event) {\r\n        Receipt currentReceipt = getCurrentReceipt();\r\n\r\n        double totalAsDouble = Double.parseDouble(currentReceipt.getTotal());\r\n        double tip = currentReceipt.getTip();\r\n        double payed = Double.parseDouble(paymentAmountPayedField.getText());\r\n        double amountWithTip = totalAsDouble + tip;\r\n\r\n        if (payed >= amountWithTip) {\r\n            errorLabel.setVisible(false);\r\n            currentReceipt.setChangeMoney(payed - amountWithTip);\r\n            double restMoney = currentReceipt.getChangeAmount();\r\n            payCashPane.setVisible(false);\r\n\r\n            if (restMoney != 0) {\r\n                restMoneyLabelSuccess.setText(\"Restgeld: \" + df.format(restMoney) + getCurrency());\r\n                restMoneyLabelSuccess.setVisible(true);\r\n            }\r\n\r\n            paymentSuccessfulPane.setVisible(true);\r\n\r\n        } else {\r\n            errorLabel.setVisible(true);\r\n        }\r\n        currentReceipt.setAmountPayed(Double.valueOf(paymentAmountPayedField.getText()));\r\n        receiptPayAmount.setText(currentReceipt.getAmountPayed() + getCurrency());\r\n    }\r\n\r\n    @FXML\r\n    void resetBill() {\r\n        emptyReceiptPane.setVisible(true);\r\n        billScroll.setVisible(false);\r\n        Receipt currentReceipt = getCurrentReceipt();\r\n        currentReceipt.closeReceipt();\r\n        updateBill();\r\n    }\r\n\r\n    // Parse all Products into Grid\r\n\r\n    @FXML\r\n    private void addProductElementsToGrid(GridPane grid, List<Product> productsList) {\r\n        DecimalFormat df = new DecimalFormat(\"#.00\");\r\n        grid.getChildren().clear();\r\n        int row = 0;\r\n        int col = 0;\r\n        for (Product item : productsList) {\r\n            // Create the elements\r\n            Pane imagePane = new Pane();\r\n            imagePane.setStyle(\"-fx-background-image: url(\\\"\" + item.getProductImageUrl() + \"\\\");\");\r\n            Label productTitleLabel = new Label(item.getProductTitle());\r\n            Label productPriceInGrid = new Label(String.valueOf(df.format(item.getProductPrice()) + \" \" +getCurrency()));\r\n            Button addButton = new Button();\r\n            Button removeButton = new Button();\r\n\r\n            addButton.getStyleClass().add(\"plus\");\r\n            removeButton.getStyleClass().add(\"minus\");\r\n\r\n            // creates Tooltip that shows productDescription\r\n            Tooltip tt = new Tooltip();\r\n            tt.setText(item.productDescription);\r\n            tt.setShowDelay(Duration.millis(100));\r\n            tt.setHideDelay(Duration.ZERO);\r\n            tt.setStyle(\"-fx-font: normal bold 12 Langdon; \"\r\n                    + \"-fx-base: #AE3522; \"\r\n                    + \"-fx-text-fill: orange;\");\r\n            productTitleLabel.setTooltip(tt);\r\n\r\n            addButton.getStyleClass().add(\"cartOptions-l\");\r\n            removeButton.getStyleClass().add(\"cartOptions-r\");\r\n\r\n            // Sets size of new elements\r\n            imagePane.setMinSize(180, 100);\r\n            imagePane.setMaxSize(220, 135);\r\n            productTitleLabel.setMinSize(150, 30);\r\n            addButton.setMinSize(65, 40);\r\n            removeButton.setMinSize(65, 40);\r\n\r\n            // sets positions of new elements\r\n            HBox buttonBox = new HBox();\r\n            buttonBox.getChildren().addAll(addButton, removeButton);\r\n            buttonBox.setMinSize(180,40);\r\n            addButton.setAlignment(Pos.CENTER);\r\n            removeButton.setAlignment(Pos.CENTER);\r\n            buttonBox.setAlignment(Pos.BASELINE_CENTER);\r\n            VBox productPane = new VBox();\r\n            productPriceInGrid.setStyle(\"-fx-font-size: 15;-fx-font-weight: 600;-fx-text-fill: black\");\r\n            productTitleLabel.setStyle(\"-fx-font-size: 17;-fx-font-weight: 600;-fx-text-fill: black\");\r\n            productTitleLabel.setAlignment(Pos.CENTER);\r\n            productPane.setAlignment(Pos.CENTER);\r\n            productPane.getChildren().addAll(productTitleLabel, imagePane, buttonBox, productPriceInGrid);\r\n            productPane.getStyleClass().addAll(\"product-vbox\");\r\n            imagePane.getStyleClass().addAll(\"productImage\");\r\n\r\n            RowConstraints rowConstraints = grid.getRowConstraints().get(0);\r\n            rowConstraints.setMinHeight(200);\r\n\r\n            // Set the properties of the elements\r\n            addButton.setOnAction(event -> addToBillButton(item));\r\n            removeButton.setOnAction(event -> removeFromBillButton(item));\r\n\r\n            // Add the elements to the grid\r\n            grid.add(productPane, col, row);\r\n\r\n            col++;\r\n            if (col % 4 == 0) {\r\n                col = 0;\r\n                row++;\r\n            }\r\n            for (int i = 0;i<30; i++) {\r\n                grid.addRow(grid.getRowCount()+1);\r\n            }\r\n        }\r\n        grid.setVgap(20);\r\n        grid.setHgap(20);\r\n    }\r\n\r\n    private void setAllSettingsPanesInvisible() {\r\n        findReceiptPane.setVisible(false);\r\n        usersSettingsPane.setVisible(false);\r\n        tablesSettingPane.setVisible(false);\r\n        productsSettingsPane.setVisible(false);\r\n        systemSettingsPane.setVisible(false);\r\n        billSettingsPane.setVisible(false);\r\n        receiptPreview.setVisible(false);\r\n        categorySettingPane.setVisible(false);\r\n    }\r\n\r\n    // Tab Switching\r\n    @FXML\r\n    void setupSystem() {\r\n        setAllSettingsPanesInvisible();\r\n        systemSettingsPane.setVisible(true);\r\n    }\r\n\r\n    @FXML\r\n    void setupProducts() {\r\n        setAllSettingsPanesInvisible();\r\n        productsSettingsPane.setVisible(true);\r\n    }\r\n\r\n    @FXML\r\n    void setupTables() {\r\n        setAllSettingsPanesInvisible();\r\n        tablesSettingPane.setVisible(true);\r\n    }\r\n\r\n    @FXML\r\n    void setupUsers() {\r\n        setAllSettingsPanesInvisible();\r\n        usersSettingsPane.setVisible(true);\r\n    }\r\n\r\n    @FXML\r\n    void showFindReceiptPane() {\r\n        setAllSettingsPanesInvisible();\r\n        findReceiptPane.setVisible(true);\r\n        receiptPreview.setVisible(true);\r\n    }\r\n\r\n    @FXML\r\n    void startSearchReceipt() {\r\n        SimpleReceipt foundReceipt = getFromReceiptHistory(Integer.parseInt(receiptNumberField.getText()));\r\n\r\n        if (foundReceipt != null) {\r\n            receiptPreview.setVisible(true);\r\n\r\n            receiptAddressFound.setText(\"Adresse: \" + getAddress());\r\n            receiptTelefonNumberFound.setText(\"Telefon: \" + getTel());\r\n            receiptBillNumberFound.setText(\"Belegnummer: \" + foundReceipt.getCount());\r\n            dateInReceiptFound.setText(\"Datum: \" +foundReceipt.getDate());\r\n            timeInReceiptFound.setText(foundReceipt.getTime());\r\n            receiptBillFound.setText(foundReceipt.getProductsList());\r\n            receiptTotalFound.setText(foundReceipt.getTotal() + getCurrency());\r\n            receiptPayAmountFound.setText(foundReceipt.getPayed() + getCurrency());\r\n            receiptRestMoneyFound.setText(foundReceipt.getChangeMoney() + getCurrency());\r\n            receiptMessageFound.setText(getMessage());\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void setupBill(ActionEvent event) {\r\n        setAllSettingsPanesInvisible();\r\n        billSettingsPane.setVisible(true);\r\n        updateBillInfo();\r\n    }\r\n\r\n    @FXML\r\n    void saveBillinfo(ActionEvent event) throws IOException {\r\n        if (!newAdressField.getText().isEmpty()){\r\n            setAddress(newAdressField.getText());\r\n        }\r\n        if (!newTelField.getText().isEmpty()){\r\n            setTel(newTelField.getText());\r\n        }\r\n        if (!newMessageField.getText().isEmpty()){\r\n            setMessage(newMessageField.getText());\r\n        }\r\n\r\n        newAdressField.clear();\r\n        newTelField.clear();\r\n        newMessageField.clear();\r\n\r\n        if (Objects.equals(getAddress(), \"Adresse: \")){\r\n            setAddress(\"\");\r\n        }\r\n        if (Objects.equals(getTel(), \"Telefon: \")){\r\n            setTel(\"\");\r\n        }\r\n\r\n        updateBillInfo();\r\n    }\r\n\r\n    void updateBillInfo() {\r\n        previewAdress.setText(\"Adresse: \" + getAddress());\r\n        previewTel.setText(\"Telefon: \" + getTel());\r\n        previewMessage.setText(getMessage());\r\n    }\r\n\r\n    // SYSTEM SETTINGS TAB METHODS\r\n    @FXML\r\n    void systemSettingsChangeCurrency() throws IOException {\r\n        String newCurrency = String.valueOf(systemNewCurrencySelector.getValue().getSymbol());\r\n        setCurrency(newCurrency);\r\n        setValue(\"currency\", String.valueOf(newCurrency));\r\n        updateReceiptPane();\r\n        updateBill();\r\n        addProductElementsToGrid(GridPaneProducts, productsList);\r\n    }\r\n\r\n    @FXML\r\n    void systemSettingsChangeBillNr(ActionEvent event) throws IOException {\r\n        setReceiptNumber(Integer.parseInt(systemNewBillNrField.getText()));\r\n        setValue(\"bill_nr\", systemNewBillNrField.getText());\r\n        updateBill();\r\n        systemNewBillNrField.clear();\r\n    }\r\n\r\n    void updateBill(){\r\n        Receipt currentReceipt = getCurrentReceipt();\r\n\r\n        if (currentReceipt != null){\r\n            billText.setText(currentReceipt.getFullReceipt());\r\n            totalPrice.setText(currentReceipt.getTotal() + getCurrency());\r\n            tableNumberText.setText(getCurrentTable().getTableNumberAsString());\r\n            subTotalLabel.setText(currentReceipt.getSubtotal() + getCurrency());\r\n            taxesTitleLabel.setText(\"Steuer(\" + getTaxes() + \"%)\");\r\n            totalTaxesBill.setText(currentReceipt.calculateTaxesAmount() + getCurrency());\r\n\r\n            emptyReceiptPane.setVisible(currentReceipt.getFullReceipt().equals(\"\"));\r\n            billScroll.setVisible(!currentReceipt.getFullReceipt().equals(\"\"));\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void systemSettingsChangeTaxes() throws IOException {\r\n        setTaxes(Double.parseDouble(systemNewTaxesField.getText()));\r\n        setValue(\"taxes\", systemNewTaxesField.getText());\r\n        updateBill();\r\n    }\r\n\r\n    // PRODUCT SETTINGS TAB METHODS\r\n    @FXML\r\n    void productsSettingsChangeName() {\r\n        int currentProduct = productsListViewSettings.getSelectionModel().getSelectedIndex();\r\n        String text = newProductName.getText();\r\n        if (!Objects.equals(text, \"\"))  {\r\n            productsList.get(currentProduct).setProductTitle(text);\r\n        }\r\n        updateProductsList(currentProduct);\r\n        newProductName.clear();\r\n    }\r\n\r\n    @FXML\r\n    void productsSettingsChangeURL() {\r\n        int currentProduct = productsListViewSettings.getSelectionModel().getSelectedIndex();\r\n        String text = newURL.getText();\r\n        if (!Objects.equals(text, \"\"))  {\r\n            productsList.get(currentProduct).setProductImageUrl(text);\r\n        }\r\n        updateProductsList(currentProduct);\r\n        newURL.clear();\r\n    }\r\n\r\n    @FXML\r\n    void productsSettingsChangeDescription() {\r\n        int currentProduct = productsListViewSettings.getSelectionModel().getSelectedIndex();\r\n        String text = newProductDescription.getText();\r\n        if (!Objects.equals(text, \"\"))  {\r\n            productsList.get(currentProduct).setProductDescription(text);\r\n        }\r\n        updateProductsList(currentProduct);\r\n        newProductDescription.clear();\r\n    }\r\n\r\n    @FXML\r\n    void productsSettingsChangePrice() {\r\n        int currentProduct = productsListViewSettings.getSelectionModel().getSelectedIndex();\r\n        double textFromNewProductPrice = Double.parseDouble(newProductPrice.getText());\r\n        productsList.get(currentProduct).setProductPrice(textFromNewProductPrice);\r\n        updateProductsList(currentProduct);\r\n        newProductPrice.clear();\r\n    }\r\n\r\n    @FXML\r\n    void productsSettingsAddCategory() {\r\n        int currentProduct = productsListViewSettings.getSelectionModel().getSelectedIndex();\r\n        String text = newProductCategory.getValue();\r\n        if (!Objects.equals(text, \"\"))  {\r\n            productsList.get(currentProduct).setCategory(text);\r\n        }\r\n        updateProductsList(currentProduct);\r\n    }\r\n    @FXML\r\n    void productsSettingsRemoveCategory() {\r\n        int currentProduct = productsListViewSettings.getSelectionModel().getSelectedIndex();\r\n        String text = newProductCategory.getValue();\r\n        productsList.get(currentProduct).removeCategory(text);\r\n        updateProductsList(currentProduct);\r\n    }\r\n\r\n    @FXML\r\n    void clearCategoryInSettings(){\r\n        int currentProduct = productsListViewSettings.getSelectionModel().getSelectedIndex();\r\n        productsList.get(currentProduct).clearCategory();\r\n        updateProductsList(currentProduct);\r\n    }\r\n    @FXML\r\n    void productsSettingsCreateNew() throws IOException {\r\n        int currentProduct = productsListViewSettings.getSelectionModel().getSelectedIndex();\r\n\r\n        String productName = newProductName.getText();\r\n        String productPrice = newProductPrice.getText();\r\n        String productDescription = newProductDescription.getText();\r\n        String productURL = newURL.getText();\r\n        String productCategory = newProductCategory.getValue();\r\n\r\n        if (productName.isEmpty()) {\r\n            productName = \"Neues Produkt\";\r\n        }\r\n        if (productPrice.isEmpty()) {\r\n            productPrice = \"0\";\r\n        }\r\n        if (productURL.isEmpty()) {\r\n            productURL = \"Kein\";\r\n        }\r\n        if (productDescription.isEmpty()) {\r\n            productDescription = \"Keine\";\r\n        }\r\n        if (productCategory == null) {\r\n            productCategory = \"Keine\";\r\n        }\r\n\r\n        new Product(productName, Double.parseDouble(productPrice), productDescription, productCategory, productURL);\r\n        updateProductsList(currentProduct);\r\n    }\r\n\r\n    @FXML\r\n    void productsSettingsDelete() {\r\n        int currentProduct = productsListViewSettings.getSelectionModel().getSelectedIndex();\r\n        productsList.remove(currentProduct);\r\n        updateProductsList(currentProduct);\r\n    }\r\n\r\n    private void updateProductsList(int currentProduct) {\r\n        productsListViewSettings.getItems().clear();\r\n\r\n        addProductElementsToGrid(GridPaneProducts, filterProductsByName(\"\"));\r\n        productsList.sort((p1, p2) -> p2.getProductTitle().compareTo(p1.getProductTitle()));\r\n\r\n        for (Product product : productsList) {\r\n            productsListViewSettings.getItems().add(product.getProductTitle());\r\n        }\r\n        if (currentProduct >= 0 && currentProduct < productsListViewSettings.getItems().size()){\r\n            productsSettingsName.setText(\"Produkt Name: \" + productsList.get(currentProduct).getProductTitle());\r\n            productsSettingsDescription.setText(\"Beschreibung: \" + productsList.get(currentProduct).getProductDescription());\r\n            productsSettingsURL.setText(\"Bild URL: \" + productsList.get(currentProduct).getProductImageUrl());\r\n            productsSettingsCategory.setText(\"Kategorie: \" + productsList.get(currentProduct).getCategory());\r\n            productsListViewSettings.getSelectionModel().select(currentProduct);\r\n        }\r\n        productToJSON();\r\n    }\r\n\r\n    // USER SETTINGS TAB METHODS\r\n    @FXML\r\n    void userSettingsChangeName() {\r\n        int currentUser = usersListView.getSelectionModel().getSelectedIndex();\r\n        String text = newFullNameField.getText();\r\n        if (!Objects.equals(text, \"\"))  {\r\n            usersList.get(currentUser).setFullName(text);\r\n        }\r\n        updateUsersList(currentUser);\r\n        newFullNameField.clear();\r\n    }\r\n\r\n    @FXML\r\n    void userSettingsChangePassword() {\r\n        int currentUser = usersListView.getSelectionModel().getSelectedIndex();\r\n        String text = newPasswordField.getText();\r\n        if (!Objects.equals(text, \"\"))  {\r\n            usersList.get(currentUser).setPassword(text);\r\n        }\r\n        updateUsersList(currentUser);\r\n        newPasswordField.clear();\r\n    }\r\n\r\n    @FXML\r\n    void userSettingsChangeUsername() {\r\n        int currentUser = usersListView.getSelectionModel().getSelectedIndex();\r\n        String text = newUsernameField.getText();\r\n        if (!Objects.equals(text, \"\"))  {\r\n            usersList.get(currentUser).setUserName(text);\r\n        }\r\n        updateUsersList(currentUser);\r\n        newUsernameField.clear();\r\n    }\r\n\r\n    @FXML\r\n    void userSettingsToggleAdminRights() {\r\n        int currentUser = usersListView.getSelectionModel().getSelectedIndex();\r\n        usersList.get(currentUser).setAdmin(!usersList.get(currentUser).getIsAdmin());\r\n        updateUsersList(currentUser);\r\n    }\r\n\r\n    @FXML\r\n    void userSettingsDeleteUser() {\r\n        int currentUser = usersListView.getSelectionModel().getSelectedIndex();\r\n        usersList.remove(currentUser);\r\n        updateUsersList(currentUser);\r\n    }\r\n\r\n    @FXML\r\n    void resetPreview(){\r\n        previewMessage.setText(\"\");\r\n        previewAdress.setText(\"Adresse: \");\r\n        previewTel.setText(\"Telefon: \");\r\n        try {\r\n            setAddress(previewAdress.getText());\r\n            setTel(previewTel.getText());\r\n            setMessage(previewMessage.getText());\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        newAdressField.clear();\r\n        newTelField.clear();\r\n        newMessageField.clear();\r\n\r\n    }\r\n    @FXML\r\n    void userSettingsCreateNewUser() throws IOException {\r\n        int currentUser = usersListView.getSelectionModel().getSelectedIndex();\r\n        new User(\"Neuer Benutzer\", false, \"NeuerBenutzer\");\r\n        updateUsersList(currentUser);\r\n    }\r\n\r\n    private void updateUsersList(int currentUser) {\r\n        // Clear User ListView\r\n        usersListView.getItems().clear();\r\n        // Recreate User ListView\r\n        for (User user : usersList) {\r\n            usersListView.getItems().add(user.getName());\r\n        }\r\n        // Update User Info\r\n        if (currentUser >= 0 && currentUser < usersListView.getItems().size()){\r\n            userSettingsFullName.setText(\"Name: \" + usersList.get(currentUser).getName());\r\n            userSettingsUsername.setText(\"Benutzername: \" + usersList.get(currentUser).getUserName());\r\n            userSettingsAdminRights.setText(\"Admin-Rechte: \" + usersList.get(currentUser).getIsAdmin());\r\n            usersListView.getSelectionModel().select(currentUser);\r\n        }\r\n        userToJson();\r\n    }\r\n\r\n    // Update Table Amount inside JSON, update List and Config\r\n    @FXML\r\n    void changeValue() throws IOException {\r\n        int newSize = Integer.parseInt(settingsInputField.getText());\r\n\r\n        // Regenerate Tables\r\n        Tables[] newArray = new Tables[newSize];\r\n        setTablesCount(0);\r\n        for (int i = 0; i < newSize; i++) {\r\n            newArray[i] = new Tables();\r\n        }\r\n        arrayTables = newArray;\r\n        // Clear Table ListView\r\n        tablesListView.getItems().clear();\r\n        // Recreating Tables ListView\r\n        for (Tables arrayTable : arrayTables) {\r\n            tablesListView.getItems().add(arrayTable.getTableName());\r\n        }\r\n        setValue(\"tableCount\", String.valueOf(newSize));\r\n        settingsInputField.clear();\r\n    }\r\n\r\n    @FXML\r\n    void openSettings() {\r\n        settingsTab.setVisible(!settingsTab.isVisible());\r\n        productsPane.setVisible(!productsPane.isVisible());\r\n        newProductCategory.setValue(\"Kategorie\");\r\n    }\r\n\r\n    // \"Crash\" button\r\n    @FXML\r\n    void exitButton() {\r\n        System.exit(0);\r\n    }\r\n\r\n    // Logout button\r\n    @FXML\r\n    void userLogout(ActionEvent event) throws IOException {\r\n        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();\r\n        stage.setScene(new Scene(FXMLLoader.load(Objects.requireNonNull(getClass().getResource(\"login.fxml\")))));\r\n        stage.setFullScreenExitHint(\"\");\r\n        stage.setFullScreen(true); // Set to Full Screen Mode\r\n        stage.show();\r\n    }\r\n\r\n    private void updateReceiptPane() {\r\n        totalPrice.setText(\"0.00\" + getCurrency());\r\n        subTotalLabel.setText(\"0.00\" + getCurrency());\r\n        totalTaxesBill.setText(\"0.00\" + getCurrency());\r\n        taxesTitleLabel.setText(\"Steuer(\" + getTaxes() + \"%)\");\r\n    }\r\n    @FXML\r\n    private void resetCategory(){\r\n        addProductElementsToGrid(GridPaneProducts, productsList);\r\n        choiceBox.getSelectionModel().clearSelection();\r\n        choiceBox.setValue(\"Kategorie\");\r\n    }\r\n\r\n    @FXML\r\n    private void openCategorySettings(){\r\n        setAllSettingsPanesInvisible();\r\n        categorySettingPane.setVisible(true);\r\n    }\r\n\r\n    @FXML\r\n    private void newCategoryAdd(){\r\n        categories.add(categorySettingsField.getText());\r\n\r\n        categoryListView.getItems().clear();\r\n        categoryListView.getItems().addAll(getCategories());\r\n\r\n        newProductCategory.getItems().clear();\r\n        newProductCategory.getItems().addAll(getCategories());\r\n\r\n        choiceBox.getItems().clear();\r\n        choiceBox.getItems().addAll(getCategories());\r\n\r\n        newCategoryBox.getItems().clear();\r\n        newCategoryBox.getItems().addAll(getCategories());\r\n\r\n        categorySettingsField.clear();\r\n    }\r\n\r\n    @FXML\r\n    private void newCategoryRemove(){\r\n        getCategories().remove(categorySettingsField.getText());\r\n        categoryListView.getItems().remove(categorySettingsField.getText());\r\n        newProductCategory.getItems().remove(categorySettingsField.getText());\r\n        choiceBox.getItems().remove(categorySettingsField.getText());\r\n        categorySettingsField.clear();\r\n    }\r\n\r\n    @FXML\r\n    private void changeCategoryName(){\r\n        int currentCategory = categoryListView.getSelectionModel().getSelectedIndex();\r\n        if (currentCategory >= 0 && currentCategory < categoryListView.getItems().size()){\r\n            getCategories().remove(getCategories().get(currentCategory));\r\n            getCategories().add(categoryNameField.getText());\r\n        }\r\n\r\n        categoryListView.getItems().clear();\r\n        categoryListView.getItems().addAll(getCategories());\r\n\r\n        newProductCategory.getItems().clear();\r\n        newProductCategory.getItems().addAll(getCategories());\r\n\r\n        choiceBox.getItems().clear();\r\n        choiceBox.getItems().addAll(getCategories());\r\n\r\n        newCategoryBox.getItems().clear();\r\n        newCategoryBox.getItems().addAll(getCategories());\r\n\r\n    }\r\n\r\n    @FXML\r\n    public void initialize(URL arg0, ResourceBundle arg1){\r\n        updateReceiptPane();\r\n        updateBillInfo();\r\n\r\n        //ChoiceBox\r\n        choiceBox.getItems().addAll(getCategories());\r\n        choiceBox.setValue(\"Kategorie\");\r\n        choiceBox.setStyle(\"-fx-background-color:  #D9D9D9; -fx-background-radius: 8;\");\r\n        choiceBox.getSelectionModel().selectedIndexProperty().addListener(new ChangeListener<Number>() {\r\n            @Override\r\n            public void changed(ObservableValue<? extends Number> observableValue, Number old_selection, Number new_selection) {\r\n                    addProductElementsToGrid(GridPaneProducts, filterProductsByCategory(choiceBox.getItems().get((Integer) new_selection)));\r\n                    System.out.println(choiceBox.getItems().get((Integer) new_selection));\r\n            }\r\n        });\r\n\r\n        //Creates ToolTip for resetBill and resetCategory button\r\n        Tooltip tt = new Tooltip();\r\n        tt.setText(\"Löscht die aktuelle Rechnung\");\r\n        tt.setShowDelay(Duration.millis(100));\r\n        tt.setHideDelay(Duration.ZERO);\r\n        tt.setStyle(\"-fx-font: normal bold 12 Langdon; \"\r\n                + \"-fx-base: #AE3522; \"\r\n                + \"-fx-text-fill: orange;\");\r\n        resetBill.setTooltip(tt);\r\n        Tooltip tt1 = new Tooltip();\r\n        tt1.setText(\"Setzt Kategorie-auswahl zurück\");\r\n        tt1.setShowDelay(Duration.millis(100));\r\n        tt1.setHideDelay(Duration.ZERO);\r\n        tt1.setStyle(\"-fx-font: normal bold 12 Langdon; \"\r\n                + \"-fx-base: #AE3522; \"\r\n                + \"-fx-text-fill: orange;\");\r\n        resetCategory.setTooltip(tt1);\r\n        Tooltip tt2 = new Tooltip();\r\n        tt2.setText(\"Löscht alle Kategorien!\");\r\n        tt2.setShowDelay(Duration.millis(100));\r\n        tt2.setHideDelay(Duration.ZERO);\r\n        tt2.setStyle(\"-fx-font: normal bold 12 Langdon; \"\r\n                + \"-fx-base: #AE3522; \"\r\n                + \"-fx-text-fill: orange;\");\r\n        resetCategoryTrash.setTooltip(tt2);\r\n        Tooltip tt3 = new Tooltip();\r\n        tt3.setText(\"Löscht Eingabe und Ansicht!\");\r\n        tt3.setShowDelay(Duration.millis(100));\r\n        tt3.setHideDelay(Duration.ZERO);\r\n        tt3.setStyle(\"-fx-font: normal bold 12 Langdon; \"\r\n                + \"-fx-base: #AE3522; \"\r\n                + \"-fx-text-fill: orange;\");\r\n        resetPreview.setTooltip(tt3);\r\n\r\n        //Category ChoiceBox in Products-Settings\r\n        newProductCategory.setValue(\"Kategorien\");\r\n        newProductCategory.getItems().addAll(getCategories());\r\n\r\n        //CategorySettings\r\n        categoryListView.getItems().addAll(getCategories());\r\n        newCategoryBox.getItems().addAll(getCategories());\r\n        newCategoryBox.setValue(\"Kategorie\");\r\n\r\n        systemNewCurrencySelector.setItems(FXCollections.observableArrayList(currencies));\r\n        systemNewCurrencySelector.setValue(currencies.get(0));\r\n        systemNewCurrencySelector.setConverter(new StringConverter<>() {\r\n            @Override\r\n            public String toString(Currency currency) {\r\n                return currency.getSymbol();\r\n            }\r\n\r\n            @Override\r\n            public Currency fromString(String string) {\r\n                return null;\r\n            }\r\n        });\r\n\r\n        ScrollPaneProducts.setStyle(\"-fx-background-color:transparent;\");\r\n        kellnerLabel.setText(\"Kellner: \" + getLoggedInUserName());\r\n        userSettings.setVisible(isAdmin);\r\n        tablesSettings.setVisible(isAdmin);\r\n        productsSettings.setVisible(isAdmin);\r\n\r\n        // Hide Admin Settings Button if not admin\r\n        if(!isAdmin){\r\n            adminButton.setVisible(false);\r\n        }\r\n\r\n        dateSetter();\r\n        addProductElementsToGrid(GridPaneProducts, productsList);\r\n\r\n        // Generate Lists of Tables, Products and Users\r\n        for (Tables arrayTable : arrayTables) {   //Parsing Tables\r\n            tablesListView.getItems().add(arrayTable.getTableName());\r\n        }\r\n\r\n        for (Product product : productsList) {\r\n            productsListViewSettings.getItems().add(product.getProductTitle());\r\n        }\r\n\r\n        for (User user : usersList) {\r\n            usersListView.getItems().add(user.getName());\r\n        }\r\n\r\n        // Check if ListView Selection changed (Tables)\r\n        tablesListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> updateBill());\r\n\r\n        // Check if ListView Selection changed (Users)\r\n        usersListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {\r\n            int currentUser = usersListView.getSelectionModel().getSelectedIndex();\r\n            if (currentUser >= 0 && currentUser < usersListView.getItems().size()){\r\n                userSettingsFullName.setText(\"Name: \" + usersList.get(currentUser).getName());\r\n                userSettingsUsername.setText(\"Benutzername: \" + usersList.get(currentUser).getUserName());\r\n                userSettingsAdminRights.setText(\"Admin-Rechte: \" + usersList.get(currentUser).getIsAdmin());\r\n            }\r\n        });\r\n\r\n        // Check if ListView Selection changed (Products)\r\n        productsListViewSettings.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {\r\n            int currentProduct = productsListViewSettings.getSelectionModel().getSelectedIndex();\r\n            if (currentProduct >= 0 && currentProduct < productsListViewSettings.getItems().size()){\r\n                productsSettingsName.setText(\"Produkt Name: \" + productsList.get(currentProduct).getProductTitle());\r\n                productsSettingsDescription.setText(\"Beschreibung: \" + productsList.get(currentProduct).getProductDescription());\r\n                productsSettingsURL.setText(\"Bild URL: \" + productsList.get(currentProduct).getProductImageUrl());\r\n                productsSettingsPrice.setText(\"Preis: \" + productsList.get(currentProduct).getProductPrice() + getCurrency());\r\n                productsSettingsCategory.setText(\"Kategorie: \" + productsList.get(currentProduct).getCategory());\r\n                productImagePreview.setStyle(\"-fx-background-image: url(\\\"\" + productsList.get(currentProduct).getProductImageUrl() + \"\\\"); -fx-background-size: contain; -fx-background-repeat: no-repeat; -fx-background-position: center center;\");\r\n            }\r\n        });\r\n\r\n        //Check if ListView Selection changed (Categories)\r\n        categoryListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue)->{\r\n            int currentCategory = categoryListView.getSelectionModel().getSelectedIndex();\r\n            if (currentCategory >= 0 && currentCategory < categoryListView.getItems().size()){\r\n                categoryLabelSettings.setText(getCategories().get(currentCategory));\r\n            }\r\n        });\r\n\r\n        // Create a Search Field Listener and update Products Grid\r\n        searchField.textProperty().addListener((observable, oldValue, newValue) -> addProductElementsToGrid(GridPaneProducts, filterProductsByName(newValue)));\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/ac/fhcampuswien/xsolutions/AppController.java b/src/main/java/at/ac/fhcampuswien/xsolutions/AppController.java
--- a/src/main/java/at/ac/fhcampuswien/xsolutions/AppController.java	(revision d82a7b7d67236cb2ba29b03c4361e773b61c3f1f)
+++ b/src/main/java/at/ac/fhcampuswien/xsolutions/AppController.java	(date 1674242647490)
@@ -1042,7 +1042,7 @@
 
     @FXML
     private void newCategoryAdd(){
-        categories.add(categorySettingsField.getText());
+        getCategories().add(categorySettingsField.getText());
 
         categoryListView.getItems().clear();
         categoryListView.getItems().addAll(getCategories());
Index: src/main/java/at/ac/fhcampuswien/xsolutions/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.ac.fhcampuswien.xsolutions;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.Image;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.StageStyle;\r\n\r\nimport java.io.IOException;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.Comparator;\r\nimport java.util.concurrent.atomic.AtomicReference;\r\n\r\nimport static at.ac.fhcampuswien.xsolutions.Configurator.*;\r\nimport static at.ac.fhcampuswien.xsolutions.Product.*;\r\nimport static at.ac.fhcampuswien.xsolutions.ReceiptHistory.loadReceiptHistory;\r\nimport static at.ac.fhcampuswien.xsolutions.User.JSONtoUsersList;\r\n\r\npublic class App extends Application {\r\n    public static Tables[] arrayTables;\r\n    public static Scene scene = null;\r\n    public static Stage stage = null;\r\n\r\n    /** GUI start\r\n     */\r\n    @Override\r\n    public void start(Stage stage) throws IOException {\r\n        this.stage = stage;\r\n        showSplashScreen();\r\n        loadMainStage();\r\n    }\r\n\r\n    private void showSplashScreen() {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"splashscreen.fxml\"));\r\n            Parent root = loader.load();\r\n            Scene scene = new Scene(root);\r\n            stage.getIcons().add(new Image(\"file:src/main/resources/icon.png\"));\r\n            stage.initStyle(StageStyle.UNDECORATED);\r\n            stage.setScene(scene);\r\n            stage.setAlwaysOnTop(true);\r\n            stage.show();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void loadMainStage() {\r\n        Task<Void> task = new Task<Void>() {\r\n            @Override\r\n            protected Void call() throws Exception {\r\n                updateProgress(0.5, 1.0);\r\n                return null;\r\n            }\r\n        };\r\n        task.setOnSucceeded(e -> {\r\n            try {\r\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"main.fxml\"));\r\n                Parent root = loader.load();\r\n                Scene scene = new Scene(root);\r\n                stage.setScene(scene);\r\n\r\n                FXMLLoader newLoader = new FXMLLoader(getClass().getResource(\"login.fxml\"));\r\n                Parent root2 = newLoader.load();\r\n                Stage newStage = new Stage();\r\n                scene = new Scene(root2);\r\n                newStage.getIcons().add(new Image(\"file:src/main/resources/icon.png\"));\r\n\r\n                newStage.setScene(scene);\r\n                newStage.setFullScreenExitHint(\"\");\r\n                newStage.setX(0);\r\n                newStage.setY(0);\r\n                newStage.setMaximized(true);\r\n                newStage.setFullScreen(true);\r\n                stage.hide();\r\n                newStage.show();\r\n            } catch (Exception ex) {\r\n                ex.printStackTrace();\r\n            }\r\n        });\r\n        new Thread(task).start();\r\n    }\r\n\r\n    /** Generates an amount of Tables and adds them to an array of tables (arrayTables)\r\n     */\r\n    public static void generateTables(int amount){\r\n        arrayTables = new Tables[amount];\r\n        for(int i = 0;i < amount; i++){\r\n            arrayTables[i]  = new Tables();\r\n        }\r\n    }\r\n\r\n    public static String getDate() {\r\n        LocalDate currentDate = LocalDate.now();\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd.MM.yyyy\");\r\n        return currentDate.format(formatter);\r\n    }\r\n\r\n    /** Initializes everything needed for the App to function\r\n     * <p>(Settings, credentials, table generation from config.txt,\r\n     * products sorting and receipt history loading and GUI starting)</p>\r\n     */\r\n    public static void main(String[] args) throws IOException {\r\n        createAppData();\r\n\r\n        JSONtoUsersList(); //Convert the JSON File back to Objects in a List\r\n        JSONtoProductList();\r\n\r\n        readConfig();\r\n\r\n        generateTables(getTableConfig());\r\n\r\n        //Sort Products List by their Category\r\n        productsList.sort(Comparator.comparingInt(p -> getCategoryOrder(p.getCategory())));\r\n\r\n        loadReceiptHistory();\r\n\r\n        launch();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/ac/fhcampuswien/xsolutions/App.java b/src/main/java/at/ac/fhcampuswien/xsolutions/App.java
--- a/src/main/java/at/ac/fhcampuswien/xsolutions/App.java	(revision d82a7b7d67236cb2ba29b03c4361e773b61c3f1f)
+++ b/src/main/java/at/ac/fhcampuswien/xsolutions/App.java	(date 1674242410604)
@@ -28,7 +28,7 @@
      */
     @Override
     public void start(Stage stage) throws IOException {
-        this.stage = stage;
+        App.stage = stage;
         showSplashScreen();
         loadMainStage();
     }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c13070c1-1365-427d-bdd0-029bd337dd1b\" name=\"Changes\" comment=\"added Kategorie in Settings ( Buttons not working currently )\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Kb5NZuTANbEEbJPvU1x24T8RD9\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"last_opened_file_path\": \"C:/Users/torso/IdeaProjects/XSolutions-Configurable-Cash-Register\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c13070c1-1365-427d-bdd0-029bd337dd1b\" name=\"Changes\" comment=\"\" />\r\n      <created>1674230404826</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1674230404826</updated>\r\n      <workItem from=\"1674230407550\" duration=\"9480000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"added Kategorie in Settings ( Buttons not working currently )\">\r\n      <created>1674240557590</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1674240557590</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"added Kategorie in Settings ( Buttons not working currently )\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"added Kategorie in Settings ( Buttons not working currently )\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision d82a7b7d67236cb2ba29b03c4361e773b61c3f1f)
+++ b/.idea/workspace.xml	(date 1674242814860)
@@ -4,7 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="c13070c1-1365-427d-bdd0-029bd337dd1b" name="Changes" comment="added Kategorie in Settings ( Buttons not working currently )" />
+    <list default="true" id="c13070c1-1365-427d-bdd0-029bd337dd1b" name="Changes" comment="idk">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/at/ac/fhcampuswien/xsolutions/App.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/at/ac/fhcampuswien/xsolutions/App.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/at/ac/fhcampuswien/xsolutions/AppController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/at/ac/fhcampuswien/xsolutions/AppController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/at/ac/fhcampuswien/xsolutions/Product.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/at/ac/fhcampuswien/xsolutions/Product.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -26,19 +31,19 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "last_opened_file_path": "C:/Users/torso/IdeaProjects/XSolutions-Configurable-Cash-Register",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/torso/IdeaProjects/XSolutions-Configurable-Cash-Register&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;
   }
-}]]></component>
+}</component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -48,6 +53,9 @@
       <option name="presentableId" value="Default" />
       <updated>1674230404826</updated>
       <workItem from="1674230407550" duration="9480000" />
+      <workItem from="1674240694191" duration="43000" />
+      <workItem from="1674242255779" duration="486000" />
+      <workItem from="1674242783568" duration="32000" />
     </task>
     <task id="LOCAL-00001" summary="added Kategorie in Settings ( Buttons not working currently )">
       <created>1674240557590</created>
@@ -56,7 +64,14 @@
       <option name="project" value="LOCAL" />
       <updated>1674240557590</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="idk">
+      <created>1674240724799</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1674240724799</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -75,6 +90,7 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="added Kategorie in Settings ( Buttons not working currently )" />
-    <option name="LAST_COMMIT_MESSAGE" value="added Kategorie in Settings ( Buttons not working currently )" />
+    <MESSAGE value="idk" />
+    <option name="LAST_COMMIT_MESSAGE" value="idk" />
   </component>
 </project>
\ No newline at end of file
